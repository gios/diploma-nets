{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAkDA;;AAlDA,+BAAiC;AACjC,MAAM,CAAC,MAAM,EAAE,CAAC;AAChB,yBAA2B;AAC3B,2CAA6C;AAC7C,qCAAuC;AACvC,mCAAqC;AACrC,kCAAoC;AACpC,6BAA+B;AAC/B,+BAAiC;AACjC,iCAAmC;AAEnC,oDAAkD;AAElD,IAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;AACtB,IAAM,aAAa,GAAG,MAAM,CAAC;AAE7B,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;AAClB,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC;AACzC,GAAG,CAAC,GAAG,CAAC,UAAO,GAAG,EAAE,IAAI;;;;qBAClB,CAAA,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAA,EAAhC,cAAgC;gBAClC,WAAM,IAAI,CAAC,GAAG,EAAE,YAAY,EAAE,EAAE,IAAI,EAAE,SAAS,GAAG,YAAY,EAAE,CAAC,EAAA;;gBAAjE,SAAiE,CAAC;;oBAElE,WAAM,IAAI,EAAE,EAAA;;gBAAZ,SAAY,CAAC;;;;;KAEhB,CAAC,CAAC;AAEH,GAAG,CAAC,GAAG,CAAC,UAAO,GAAgB,EAAE,IAAI;;;;;;gBAEjC,WAAM,IAAI,EAAE,EAAA;;gBAAZ,SAAY,CAAC;;;;gBAEb,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC;oBACzC,OAAO,CAAC,IAAI,CAAC,KAAG,CAAC,CAAC;gBACpB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,KAAK,CAAC,KAAG,CAAC,CAAC;gBACrB,CAAC;gBAED,GAAG,CAAC,MAAM,GAAG,KAAG,CAAC,MAAM,IAAI,GAAG,CAAC;gBAC/B,GAAG,CAAC,IAAI,GAAG,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,KAAG,CAAC,OAAO,IAAI,uBAAuB,EAAE,CAAC;gBACnF,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,KAAG,EAAE,GAAG,CAAC,CAAC;;;;;KAEnC,CAAC,CAAC;AAEH,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;AAC/B,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,eAAe,EAAE,sBAAsB,CAAC,EAAE,CAAC,CAAC,CAAC;AAGpG,wBAAU,CAAC,GAAG,CAAC,CAAC;AAEhB,OAAO,CAAC,IAAI,CAAC,qCAAkC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAE,CAAC,CAAC;AAC3E,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC","sourcesContent":["import * as dotenv from 'dotenv';\r\ndotenv.config();\r\nimport * as Koa from 'koa';\r\nimport * as bodyparser from 'koa-bodyparser';\r\nimport * as convert from 'koa-convert';\r\nimport * as helmet from 'koa-helmet';\r\nimport * as serve from 'koa-static';\r\nimport * as jwt from 'koa-jwt';\r\nimport * as send from 'koa-send';\r\nimport * as winston from 'winston';\r\n\r\nimport { initRoutes } from './routes/routes-init';\r\n\r\nconst app = new Koa();\r\nconst SHARED_SECRET = 'nets';\r\n\r\napp.use(helmet());\r\napp.use(serve(__dirname + '/../public'));\r\napp.use(async (ctx, next) => {\r\n  if (ctx.path.split('/')[1] !== 'api') {\r\n    await send(ctx, 'index.html', { root: __dirname + '/../public' });\r\n  } else {\r\n    await next();\r\n  }\r\n});\r\n\r\napp.use(async (ctx: Koa.Context, next) => {\r\n  try {\r\n    await next();\r\n  } catch (err) {\r\n    if (400 < ctx.status && ctx.status < 500) {\r\n      winston.warn(err);\r\n    } else {\r\n      winston.error(err);\r\n    }\r\n\r\n    ctx.status = err.status || 500;\r\n    ctx.body = { status: ctx.status, message: err.message || 'Internal server error' };\r\n    ctx.app.emit('error', err, ctx);\r\n  }\r\n});\r\n\r\napp.use(convert(bodyparser()));\r\napp.use(jwt({ secret: SHARED_SECRET }).unless({ path: [/^\\/api\\/login/, /^\\/api\\/registration/] }));\r\n\r\n// Routes\r\ninitRoutes(app);\r\n\r\nwinston.info(`Application is running on port ${process.env.PORT || 3000}`);\r\napp.listen(process.env.PORT || 3000);\r\n"]}