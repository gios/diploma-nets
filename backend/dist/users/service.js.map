{"version":3,"file":"service.js","sourceRoot":"","sources":["../../users/service.ts"],"names":[],"mappings":"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","sourcesContent":["import * as knexInstance from 'knex';\r\nimport * as crypto from 'crypto';\r\nimport * as winston from 'winston';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { Context } from 'koa';\r\n\r\nimport * as knexConfig from '../knexfile';\r\nconst knex = knexInstance(Object.assign(knexConfig, { connection: process.env.DATABASE_URL }));\r\nconst cipherType = 'aes-256-cbc';\r\nconst saltWord = 'salt';\r\nconst SHARED_SECRET = 'nets';\r\n\r\nexport class UserService {\r\n\r\n  async login(ctx: Context): Promise<string> {\r\n    const { username, password } = ctx.request.body;\r\n    const foundUserPassword = await knex('users')\r\n      .where('username', username)\r\n      .first('id', 'password');\r\n\r\n    if (!foundUserPassword) {\r\n      ctx.throw('User is not found', 404);\r\n    }\r\n\r\n    const isCorrectPassword = (this.encryptoPassword(foundUserPassword.password) === password ? true : false);\r\n\r\n    if (!isCorrectPassword) {\r\n      ctx.throw('Password is not correct', 404);\r\n    }\r\n\r\n    const foundUser = await knex('users')\r\n      .where('id', foundUserPassword.id)\r\n      .first('username', 'id');\r\n\r\n    return jwt.sign({ id: foundUser.id, username: foundUser.username }, SHARED_SECRET, { expiresIn: '10h' });\r\n  }\r\n\r\n  async registration(ctx: Context): Promise<string> {\r\n    const { username, password } = ctx.request.body;\r\n    const passwordHash = this.cryptoPassword(password);\r\n\r\n    const usernameExist = await knex('users').first('id').where('username', username);\r\n\r\n    if (usernameExist) {\r\n      ctx.throw('Username should be unique', 409);\r\n    }\r\n\r\n    const userId = await knex('users')\r\n      .returning('id')\r\n      .insert({\r\n        username,\r\n        password: passwordHash,\r\n        created_at: new Date(),\r\n        updated_at: new Date()\r\n      });\r\n\r\n    const user = await knex('users')\r\n      .where('id', userId[0])\r\n      .first('username', 'id');\r\n\r\n    return jwt.sign({ id: user.id, username: user.username }, SHARED_SECRET, { expiresIn: '10h' });\r\n  }\r\n\r\n  private cryptoPassword(password: Buffer) {\r\n    const cipher = crypto.createCipher(cipherType, saltWord);\r\n    cipher.update(password);\r\n    try {\r\n      return cipher.final('hex');\r\n    } catch (error) {\r\n      winston.error(error);\r\n      return;\r\n    }\r\n  }\r\n\r\n  private encryptoPassword(hash: string) {\r\n    const decipher = crypto.createDecipher(cipherType, saltWord);\r\n    decipher.update(hash, 'hex');\r\n    try {\r\n      return decipher.final('utf8');\r\n    } catch (error) {\r\n      winston.error(error);\r\n      return;\r\n    }\r\n  }\r\n}\r\n"]}